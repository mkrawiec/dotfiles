#!/usr/bin/env python3

#
# vscode config generator, transforms yaml config files into output settings.json
#

import yaml
import re
import json
import platform
from os import path
from collections import defaultdict

CONFIG_PATH = {
    "Linux": "~/.config/Code/User",
    "Darwin": "~/Library/Application Support/Code/User",
}
OUTPUT = "settings.json"
INPUT_SETTINGS = "settings.yaml"
INPUT_KEYBINDINGS = "vim_keybindings.yaml"
NON_COMMAND_DELIMITER = "_"

output_object = defaultdict(list)


def load_keybindings():
    with vsopen(INPUT_KEYBINDINGS) as f:
        contents = yaml.safe_load(f)
        convert_keybinding_section(
            contents["nnoremap"], "vim.normalModeKeyBindingsNonRecursive"
        )
        convert_keybinding_section(
            contents["vnoremap"], "vim.visualModeKeyBindingsNonRecursive"
        )
        convert_keybinding_section(
            contents["noremap"], "vim.normalModeKeyBindingsNonRecursive"
        )
        convert_keybinding_section(
            contents["noremap"], "vim.visualModeKeyBindingsNonRecursive"
        )


def load_settings():
    with vsopen(INPUT_SETTINGS) as f:
        contents = yaml.safe_load(f)
        output_object.update(contents)


def convert_keybinding_section(keybindings, result_key):
    results = []
    for key, raw_binding in keybindings.items():
        binding, is_literal = parse_binding(raw_binding)
        result = {"before": split_keystr(key)}

        if is_literal:
            result["after"] = convert_binding(split_keystr(binding))
        else:
            result["commands"] = convert_binding(binding)
        results.append(result)

    output_object[result_key].extend(results)


def split_keystr(text):
    return re.findall(r"(<[^>]+>|.)", text)


def convert_binding(binding):
    return binding if isinstance(binding, list) else [binding]


def parse_binding(binding):
    is_literal = (
        isinstance(binding, str)
        and binding.startswith(NON_COMMAND_DELIMITER)
        and binding.endswith(NON_COMMAND_DELIMITER)
    )

    stripped = binding.strip(NON_COMMAND_DELIMITER) if is_literal else binding

    return stripped, is_literal


def save_settings():
    with vsopen(OUTPUT, "w") as outfile:
        json.dump(output_object, outfile)


def vsopen(file, mode="r"):
    basedir = path.expanduser(CONFIG_PATH[platform.system()])
    return open(path.join(basedir, file), mode)


if __name__ == "__main__":
    load_settings()
    load_keybindings()
    save_settings()
